---

- name: Include OS-specific variables (RedHat).
  include_vars: "{{ ansible_os_family }}.yml"
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution != "Fedora"

- name: Include OS-specific variables (Fedora).
  include_vars: "{{ ansible_distribution }}.yml"
  when: ansible_distribution == "Fedora"

- name: Include OS-specific variables (Debian).
  include_vars: "{{ ansible_os_family }}.yml"
  when: ansible_os_family == "Debian"

- name: Define git_install_from_source_dependencies.
  set_fact:
    git_install_from_source_dependencies: "{{ __git_install_from_source_dependencies | list }}"
  when: git_install_from_source_dependencies is not defined

- name: Ensure git's dependencies are installed.
  package:
    name: "{{ git_install_from_source_dependencies }}"
    state: present

# - name: Get installed version
#   block:
#     - command: >
#         git --version
#         warn=no
#       register: git_installed_version
#     - set_fact:
#         git_not_installed: false
#   rescue:
#     - set_fact:
#         git_not_installed: true

# - debug: msg={{git_installed_version.exception}}
#   verbosity: 3
#   when:
#     - git_installed_version.exception is defined

- name: check installed version result
  block:
    - name: Git installed set fact
      set_fact:
        git_not_installed: true
    - name: Get installed version
      command: >
        git --version
        warn=no
      changed_when: false
      failed_when: false
      check_mode: false
      register: git_installed_version
    - name: set installed fact
      set_fact:
        git_not_installed: false
      when: git_installed_version.stdout is defined
    - name: set installed fact
      set_fact:
        git_not_installed: true
      when: git_installed_version.exception is defined
  rescue:
    - set_fact:
        git_not_installed: true

# yamllint disable rule:line-length
- name: Force git install if the version numbers do not match
  set_fact:
    git_reinstall_from_source: true
  when:
    - (git_install_from_source_force_update | bool) or git_not_installed
    - git_not_installed or ((git_installed_version.rc == 0) and (git_installed_version.stdout | regex_replace("^.*?([0-9\.]+)$", "\\1") is version(git_version, operator="!=")))
# yamllint enable rule:line-length

- name: Download git.
  get_url:
    url: "https://www.kernel.org/pub/software/scm/git/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}/git-{{ git_version }}.tar.gz"
  when: git_installed_version is failed or git_reinstall_from_source | bool

- name: Expand git archive.
  unarchive:
    src: "{{ workspace }}/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}"
    creates: "{{ workspace }}/git-{{ git_version }}/README"
    copy: false
  when: git_installed_version is failed or git_reinstall_from_source | bool

- name: Build git.
  command: >
    make prefix={{ git_install_path }} {{ item }}
    chdir={{ workspace }}/git-{{ git_version }}
  with_items:
    - all
    - install
  when: git_installed_version is failed or git_reinstall_from_source | bool
  become: true

- name: Clean up archive
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ workspace }}/git-{{ git_version }}.tar.gz"
    - "{{ workspace }}/git-{{ git_version }}"
  when: git_install_from_source_cleanup
